var searchIndex = JSON.parse('{\
"quaint":{"doc":"quaint","t":"NNNNNNNNNNNNNGNNNENAOAAAAAAOOANDINNNNNNNNNNNNDNNNNNNNDDNNDIENNDENINDNNNNNEDNNNNNNNNNNDENNNDNNNNGIDNENDNNNNIIIIEDINNENDEEDNNNNDNDNNDNDNNNNNNNNNNNNNNENNEGIDDNNENDNNNNNDNDDDNNENNNDENNNDDNEQNNDDNENENDNNDNNDNNENDNNNLLLFKLLLLLMKLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLFLFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLKLLFLFLMLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLKLLKLLKLLKLLKLLKLLFKLLKLLFLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLFKLLFFLLLMLFLLLLLLKLKLLKLLKLLKLLKLLLLKLLLKLLKLLLLLLLKLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFFLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENEINEDNNDDNNDNNDNNDINNNDDDDNNEDNNDEDNIIDIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLKLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMCLLLLLLLLLLFLLLLLLLLLLLLLKLLLLLKLLLLLKLLLLLKLLLLLKLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLMLFLLLLLLLLLLLLLLLLLLLLLLLKCKLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLMMMNNNNNNNNNNNENNDENNNNNNNNNNNENNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNNNNNIDDENNDIOKKKKKKKKKKOOKMMMDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDDDGDIKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLKLLLLKLLLLKLLLLKLLLLKLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLKLLLL","n":["Array","Boolean","Bytes","Char","Date","DateTime","Double","Enum","Float","Int32","Int64","Json","Numeric","Result","Text","Time","Uuid","Value","Xml","ast","col","connector","error","pooled","prelude","serde","single","val","values","visitor","Add","AggregateToString","Aliasable","All","And","Any","Array","Array","Array","ArrayContains","ArrayNotContains","Asc","AscNullsFirst","AscNullsLast","Asterisk","Average","Between","Boolean","Boolean","Boolean","Bytes","Bytes","Char","Coalesce","Column","Column","ColumnRef","CommonTableExpression","Comparable","Compare","Compare","Compound","Concat","ConditionTree","ConditionTree","Conjunctive","Constant","Count","Date","DateTime","DateTime","Decimal","Default","DefaultValue","Delete","Delete","Desc","DescNullsFirst","DescNullsLast","Div","DoNothing","Double","Double","Enum","Equals","Expression","ExpressionKind","Float","Float","Full","Function","Function","Generated","GreaterThan","GreaterThanOrEquals","GroupByDefinition","Groupable","Grouping","In","IndexDefinition","Inner","Insert","Insert","Int","Int32","Int64","IntoCommonTableExpression","IntoGroupByDefinition","IntoOrderDefinition","IntoRaw","Join","JoinData","Joinable","JoinedTable","Json","JsonCompare","JsonCompare","JsonExtract","JsonPath","JsonType","JsonUnquote","Left","LessThan","LessThanOrEquals","Like","Lower","Matches","Maximum","Maximum","Merge","Minimum","Mul","MultiRowInsert","NegativeCondition","NoCondition","Not","NotBetween","NotEquals","NotIn","NotLike","NotMatches","NotNull","Null","Null","Number","Numeric","Object","OnConflict","Op","Or","Order","OrderDefinition","Orderable","Ordering","Over","Parameterized","Provided","Query","Query","Raw","Raw","Raw","RawValue","Rem","Right","Row","Row","RowNumber","RowToJson","Select","Select","Select","SelectQuery","Selection","Single","Single","SingleRowInsert","SqlOp","String","String","Sub","Sum","Table","Table","TableType","Target","Text","Text","TextSearch","TextSearchRelevance","Time","TypeDataLength","TypeEquals","TypeFamily","TypeNotEquals","Union","Union","Union","Update","Update","Update","Upper","Uuid","Uuid","Value","Value","Values","Values","Values","Xml","accepts","add","add_unique_index","aggregate_to_string","alias","alias","alias","alias","alias","alias","alias","all","all","all","all","all_from","and","and","and_from","and_where","any","any","any","array","array","as_bool","as_bytes","as_char","as_date","as_datetime","as_f32","as_f64","as_i32","as_i64","as_integer","as_json","as_numeric","as_str","as_time","as_uuid","ascend","ascend","ascend_nulls_first","ascend_nulls_first","ascend_nulls_last","ascend_nulls_last","asterisk","asterisk","avg","between","between","between","boolean","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_to_sql","build","build","bytes","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coalesce","column","column","columns","comment","comment","comment","comment","compare_raw","compare_raw","compare_raw","concat","contains","count","database","database","date","datetime","default","default","default","default","default","default","default","default","default","default","default","default","default_autogen","default_value","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","descend","descend","descend_nulls_first","descend_nulls_first","descend_nulls_last","descend_nulls_last","distinct","distinct","div","double","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","empty","enum_variant","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equals","equals","equals","equivalent","equivalent","expression_into","flatten_row","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_table","from_table","full_join","full_join","greater_than","greater_than","greater_than","greater_than_or_equals","greater_than_or_equals","greater_than_or_equals","group","group","group_by","has_autogen","having","in_selection","in_selection","in_selection","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner_join","inner_join","int32","int64","integer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_cte","into_cte","into_deserializer","into_group_by_definition","into_group_by_definition","into_group_by_definition","into_group_by_definition","into_iter","into_iter","into_json","into_numeric","into_order_definition","into_order_definition","into_order_definition","into_sql","into_string","into_vec","invert_if","is_array","is_asterisk","is_bool","is_bytes","is_date","is_datetime","is_delete","is_empty","is_empty","is_empty","is_empty","is_empty","is_i32","is_i64","is_insert","is_integer","is_json","is_not_null","is_not_null","is_not_null","is_null","is_null","is_null","is_null","is_numeric","is_select","is_text","is_time","is_union","is_update","is_uuid","json","json_array_begins_with","json_array_begins_with","json_array_begins_with","json_array_contains","json_array_contains","json_array_contains","json_array_ends_into","json_array_ends_into","json_array_ends_into","json_array_not_begins_with","json_array_not_begins_with","json_array_not_begins_with","json_array_not_contains","json_array_not_contains","json_array_not_contains","json_array_not_ends_into","json_array_not_ends_into","json_array_not_ends_into","json_extract","json_type_equals","json_type_equals","json_type_equals","json_type_not_equals","json_type_not_equals","json_type_not_equals","json_unquote","kind","left_join","left_join","len","len","less_than","less_than","less_than","less_than_or_equals","less_than_or_equals","less_than_or_equals","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","like","like","like","limit","lower","matches","matches","matches","max","min","mul","multi","multi_into","name","named_selection","native_uuid","new","new","new","new","new","new","not","not","not_between","not_between","not_between","not_equals","not_equals","not_equals","not_in_selection","not_in_selection","not_in_selection","not_like","not_like","not_like","not_matches","not_matches","not_matches","numeric","offset","on","on","on_conflict","opt_table","or","or","or_where","order","order","order_by","order_by","partition_by","pop","push","push","raw","rem","returning","returns_json","right_join","right_join","row_len","row_number","row_to_json","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","set","single","single","single_into","so_that","so_that","so_that","string","sub","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","sum","table","table","text","text_search","text_search_relevance","time","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_sql","to_sql","to_sql_checked","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_family","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upper","uuid","uuid_to_bin","uuid_to_bin_swapped","value","value","values","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with","with_capacity","with_capacity","xml","AcceptInvalidCerts","ConnectionInfo","DangerPlainText","EncryptMode","GetRow","InMemorySqlite","IsolationLevel","Mssql","Mssql","Mssql","MssqlUrl","Mysql","Mysql","Mysql","MysqlUrl","Off","On","PostgreSql","Postgres","Postgres","PostgresUrl","Queryable","ReadCommitted","ReadUncommitted","RepeatableRead","ResultRow","ResultRowRef","ResultSet","ResultSetIterator","Serializable","Snapshot","SqlFamily","Sqlite","Sqlite","Sqlite","SqliteParams","SslAcceptMode","SslParams","Strict","TakeRow","ToColumnNames","Transaction","TransactionCapable","ValueIndex","application_name","as_ref","as_str","at","at","begin_statement","begin_statement","begin_statement","begin_statement","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_binding","client","client","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","columns","commit","conn","connect_timeout","connect_timeout","connect_timeout","connection","connection_limit","connection_limit","connection_string","database_location","db_name","dbname","dbname","dbname","dbname","default","delete","delete","delete","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encrypt","eq","eq","eq","eq","equivalent","equivalent","execute","execute","execute","execute","execute","execute","execute_raw","execute_raw","execute_raw","execute_raw","execute_raw","execute_raw","execute_raw_typed","execute_raw_typed","execute_raw_typed","execute_raw_typed","execute_raw_typed","execute_raw_typed","file_path","file_path","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_first","from_scheme","from_str","from_str","from_url","get","get","get","get_result_row","host","host","host","host","index","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_single","into_single","is_empty","is_healthy","is_healthy","is_healthy","is_healthy","is_healthy","is_healthy","is_mssql","is_mysql","is_postgres","is_sqlite","last_insert_id","len","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","max_connection_lifetime","max_connection_lifetime","max_connection_lifetime","max_connection_lifetime","max_idle_connection_lifetime","max_idle_connection_lifetime","max_idle_connection_lifetime","max_idle_connection_lifetime","mysql_async","new","new","new","new","new","new","new","new","new_in_memory","next","params_from_iter","password","password","password","pg_bouncer","pg_bouncer","pool_timeout","pool_timeout","pool_timeout","port","port","port","port","prefer_socket","query","query","query","query","query","query","query_raw","query_raw","query_raw","query_raw","query_raw","query_raw","query_raw_typed","query_raw_typed","query_raw_typed","query_raw_typed","query_raw_typed","query_raw_typed","raw_cmd","raw_cmd","raw_cmd","raw_cmd","raw_cmd","raw_cmd","requires_isolation_first","requires_isolation_first","requires_isolation_first","requires_isolation_first","requires_isolation_first","requires_isolation_first","rollback","rusqlite","schema","schema","schema_name","scheme_is_supported","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","select","select","select","server_reset_query","server_reset_query","server_reset_query","server_reset_query","set_tx_isolation_level","set_tx_isolation_level","set_tx_isolation_level","set_tx_isolation_level","set_tx_isolation_level","set_tx_isolation_level","socket","socket_timeout","socket_timeout","socket_timeout","socket_timeout","sql_family","sqlite_version","start_transaction","start_transaction","start_transaction","start_transaction","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","take_result_row","tiberius","to_column_names","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","tokio_postgres","trust_server_certificate","trust_server_certificate_ca","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","url","url","username","username","username","username","version","version","version","version","version","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","db_name","db_name","file_path","AuthenticationFailed","Available","CannotParse","ColumnNotFound","ColumnReadFailure","ConnectTimeout","ConnectionClosed","ConnectionError","ConversionError","DatabaseAccessDenied","DatabaseAlreadyExists","DatabaseConstraint","DatabaseDoesNotExist","DatabaseUrlIsInvalid","Error","ErrorKind","Fields","ForeignKey","ForeignKeyConstraintViolation","FromRowError","IncorrectNumberOfParameters","Index","InvalidConnectionArguments","InvalidIsolationLevel","IoError","LengthMismatch","MissingFullTextSearchIndex","Name","NotFound","NullConstraintViolation","PoolClosed","PoolTimeout","QueryError","QueryInvalidInput","ResultIndexOutOfBounds","ResultTypeMismatch","RollbackWithoutBegin","SocketTimeout","TableDoesNotExist","TlsError","TransactionAlreadyClosed","TransactionWriteConflict","UUIDError","Unavailable","UniqueConstraintViolation","UnsupportedColumnType","ValueOutOfRange","available","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","into","into","into","into","is_closed","kind","lift_into","lift_into","lift_into","lift_into","original_code","original_message","provide","provide","sculpt","sculpt","sculpt","sculpt","subset","subset","subset","subset","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","actual","column","column","column_type","constraint","constraint","constraint","db_name","db_name","db_name","expected","in_use","max_open","message","message","table","timeout","user","Builder","PooledConnection","Quaint","begin_statement","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","capacity","check_out","clone","clone_into","connection_info","connection_limit","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","execute","execute_raw","execute_raw_typed","from","from","from","health_check_interval","init","init","init","into","into","into","is_healthy","lift_into","lift_into","lift_into","max_idle","max_idle_lifetime","max_lifetime","pool_timeout","query","query_raw","query_raw_typed","raw_cmd","requires_isolation_first","sculpt","sculpt","sculpt","server_reset_query","set_tx_isolation_level","subset","subset","subset","test_on_check_out","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","vzip","vzip","vzip","ConnectionInfo","InMemorySqlite","Mssql","Mssql","Mysql","Mysql","Postgres","Postgres","Queryable","ResultRow","ResultSet","SqlFamily","Sqlite","Sqlite","Transaction","TransactionCapable","col","execute","execute_raw","execute_raw_typed","is_healthy","query","query_raw","query_raw_typed","raw_cmd","requires_isolation_first","set_tx_isolation_level","val","values","version","db_name","db_name","file_path","ValueDeserializer","borrow","borrow_mut","deref","deref_mut","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_row","from_rows","init","into","lift_into","sculpt","subset","try_from","try_into","type_id","vzip","Quaint","begin_statement","borrow","borrow_mut","clone","clone_into","connection_info","deref","deref_mut","drop","execute","execute_raw","execute_raw_typed","fmt","from","init","into","is_healthy","lift_into","new","new_in_memory","query","query_raw","query_raw_typed","raw_cmd","requires_isolation_first","sculpt","set_tx_isolation_level","subset","to_owned","try_from","try_into","type_id","version","vzip","C_BACKTICK_CLOSE","C_BACKTICK_OPEN","C_WILDCARD","Mssql","Mysql","Postgres","Result","Sqlite","Visitor","add_parameter","add_parameter","add_parameter","add_parameter","add_parameter","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","columns_to_bracket_list","compatibility_modifications","compatibility_modifications","delimited_identifiers","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","lift_into","lift_into","lift_into","lift_into","parameter_substitution","parameter_substitution","parameter_substitution","parameter_substitution","parameter_substitution","sculpt","sculpt","sculpt","sculpt","subset","subset","subset","subset","surround_with","surround_with_backticks","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","visit_aggregate_to_string","visit_aggregate_to_string","visit_aggregate_to_string","visit_aggregate_to_string","visit_aggregate_to_string","visit_average","visit_average","visit_column","visit_columns","visit_comment","visit_compare","visit_concat","visit_concat","visit_concat","visit_conditions","visit_cte","visit_delete","visit_equals","visit_equals","visit_equals","visit_equals","visit_expression","visit_function","visit_greater_than","visit_greater_than","visit_greater_than_or_equals","visit_greater_than_or_equals","visit_grouping","visit_insert","visit_insert","visit_insert","visit_insert","visit_insert","visit_join_data","visit_joins","visit_json_array_contains","visit_json_array_contains","visit_json_array_contains","visit_json_array_contains","visit_json_array_contains","visit_json_extract","visit_json_extract","visit_json_extract","visit_json_extract","visit_json_extract","visit_json_extract_first_array_item","visit_json_extract_first_array_item","visit_json_extract_first_array_item","visit_json_extract_first_array_item","visit_json_extract_first_array_item","visit_json_extract_last_array_item","visit_json_extract_last_array_item","visit_json_extract_last_array_item","visit_json_extract_last_array_item","visit_json_extract_last_array_item","visit_json_type_equals","visit_json_type_equals","visit_json_type_equals","visit_json_type_equals","visit_json_type_equals","visit_json_unquote","visit_json_unquote","visit_json_unquote","visit_json_unquote","visit_json_unquote","visit_less_than","visit_less_than","visit_less_than_or_equals","visit_less_than_or_equals","visit_like","visit_like","visit_limit_and_offset","visit_limit_and_offset","visit_limit_and_offset","visit_limit_and_offset","visit_limit_and_offset","visit_matches","visit_matches","visit_matches","visit_matches","visit_matches","visit_merge","visit_merge","visit_multiple_tuple_comparison","visit_multiple_tuple_comparison","visit_not_equals","visit_not_equals","visit_not_equals","visit_not_equals","visit_not_like","visit_not_like","visit_operation","visit_ordering","visit_ordering","visit_ordering","visit_ordering","visit_ordering","visit_parameterized","visit_partitioning","visit_query","visit_raw_value","visit_raw_value","visit_raw_value","visit_raw_value","visit_raw_value","visit_row","visit_select","visit_selection","visit_sub_selection","visit_sub_selection","visit_table","visit_text_search","visit_text_search","visit_text_search","visit_text_search","visit_text_search","visit_text_search_relevance","visit_text_search_relevance","visit_text_search_relevance","visit_text_search_relevance","visit_text_search_relevance","visit_union","visit_update","visit_update_set","visit_upsert","visit_upsert","visit_upsert","visit_values","visit_values","vzip","vzip","vzip","vzip","write","write","write","write","write"],"q":["quaint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::astquaint::connector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::connector::ConnectionInfo","","","quaint::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::error::ErrorKind","","","","","","","","","","","","","","","","","","quaint::pooled","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::prelude::ConnectionInfo","","","quaint::serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::single","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","quaint::visitord":["An array value (PostgreSQL).","Boolean value.","Bytes value.","A single character.","A date value.","A datetime value.","64-bit floating point.","Database enum value.","32-bit floating point.","32-bit signed integer.","64-bit signed integer.","A JSON value.","A numeric value.","","String value.","A time value.","An UUID value.","A value we must parameterize for the prepared statement. …","A XML value.","An abstract syntax tree for SQL queries.","Marks a given string or a tuple as a column. Useful when …","A set of abstractions for database connections.","Error module","A connection pool to a SQL database.","A “prelude” for users of the <code>quaint</code> crate.","Convert results from the database into any type …","A single connection abstraction to a SQL database.","Marks a given string as a value. Useful when using a value …","Convert given set of tuples into <code>Values</code>.","Visitors for reading an abstract SQL syntax tree, …","","An aggregate function that concatenates strings from a …","An object that can be aliased.","ALL (<code>left</code>)","<code>(left_expression AND right_expression)</code>","ANY (<code>left</code>)","","","An array value (PostgreSQL).","","","Ascending","Ascending Nulls First","Ascending Nulls Last","A qualified asterisk to a table","A representation of the <code>AVG</code> function in the database.","<code>value</code> BETWEEN <code>left</code> AND <code>right</code>","","","Boolean value.","","Bytes value.","A single character.","Returns the first non-null expression","A column definition.","A database column","","A builder for a common table expression (CTE) statement, …","An item that can be compared against other values in the …","For modeling comparison expressions.","A comparison expression","","A representation of the <code>Concat</code> function in the database.","Tree structures and leaves for condition building.","A tree of expressions to evaluate from the deepest value …","<code>AND</code>, <code>OR</code> and <code>NOT</code> conjunctive implementations.","","Returns the number of rows that matches a specified …","A date value.","","A datetime value.","","DEFAULT keyword, e.g. for …","Defines a default value for a <code>Column</code>.","A builder for a <code>DELETE</code> statement.","","Descending","Descending Nulls First","Descending Nulls Last","","When a row already exists, do nothing. Works with …","","64-bit floating point.","Database enum value.","<code>left = right</code>","An expression that can be positioned in a query. Can be a …","An expression we can compare and use in database queries.","","32-bit floating point.","Implements an <code>FULL JOIN</code> with given <code>JoinData</code>.","A database function definition","A database function call","Generated in the database.","<code>left &gt; right</code>","<code>left &gt;= right</code>","Defines a grouping for the <code>GROUP BY</code> statement.","An item that can be used in the <code>GROUP BY</code> statement","A list of definitions for the <code>GROUP BY</code> statement","<code>left IN (..)</code>","A definition of a database index.","Implements an <code>INNER JOIN</code> with given <code>JoinData</code>.","A builder for an <code>INSERT</code> statement.","","","32-bit signed integer.","64-bit signed integer.","Conversion into a common table expression.","Convert the value into a group by definition.","Convert the value into an order definition with order item …","Converts the value into a state to skip parameterization.","A representation of a <code>JOIN</code> statement.","The <code>JOIN</code> table and conditions.","An item that can be joined.","","A JSON value.","","All json related comparators","","","","","Implements an <code>LEFT JOIN</code> with given <code>JoinData</code>.","<code>left &lt; right</code>","<code>left &lt;= right</code>","<code>left LIKE %..%</code>","A represention of the <code>LOWER</code> function in the database.","<code>left</code> @@ to_tsquery(<code>value</code>)","A represention of the <code>MAX</code> function in the database.","","","A represention of the <code>MIN</code> function in the database.","","A builder for an <code>INSERT</code> statement for multiple rows.","A leaf that cancels the condition, <code>1=0</code>","A leaf that does nothing to the condition, <code>1=1</code>","<code>(NOT expression)</code>","<code>value</code> NOT BETWEEN <code>left</code> AND <code>right</code>","<code>left &lt;&gt; right</code>","<code>left NOT IN (..)</code>","<code>left NOT LIKE %..%</code>","(NOT <code>left</code> @@ to_tsquery(<code>value</code>))","<code>value IS NOT NULL</code>","<code>value IS NULL</code>","","","A numeric value.","","<code>INSERT</code> conflict resolution strategies.","An operation: sum, sub, mul or div.","<code>(left_expression OR right_expression)</code>","The ordering direction","Defines ordering for an <code>ORDER BY</code> statement.","An item that can be used in the <code>ORDER BY</code> statement","A list of definitions for the <code>ORDER BY</code> statement.","Determines the partitioning and ordering of a rowset …","Anything that we must parameterize before querying","A static value.","A database query","","A value written to the query as-is without …","Raw comparator, allows to use an operator <code>left &lt;raw&gt; right</code> …","","A user-provided value we do not parameterize.","","Implements an <code>RIGHT JOIN</code> with given <code>JoinData</code>.","A collection of values surrounded by parentheses.","Data in a row form, e.g. (1, 2, 3)","A window function that assigns a sequential integer number …","A representation of the <code>ROW_TO_JSON</code> function in the …","A builder for a <code>SELECT</code> statement.","","","A database query that only returns data without modifying …","A nested <code>SELECT</code> or <code>SELECT .. UNION</code> statement","A single expression leaf","","A builder for an <code>INSERT</code> statement for a single row.","Calculation operations in SQL queries.","","","","A represention of the <code>SUM</code> function in the database.","A table definition","","Either an identifier or a nested query.","","","String value.","Holds the expressions on which to perform a full-text …","Holds the expressions &amp; query on which to perform a …","A time value.","","","","","A builder for a <code>UNION</code>s over multiple <code>SELECT</code> statements.","","","A builder for an <code>UPDATE</code> statement.","ON CONFLICT UPDATE is supported for Sqlite and Postgres","","A represention of the <code>UPPER</code> function in the database.","","An UUID value.","A value we must parameterize for the prepared statement. …","A single value, column, row or a nested select","An in-memory temporary table. Can be used in some of the …","A <code>VALUES</code> statement","","A XML value.","","","Add unique index definition.","Aggregates the given field into a string.","Alias table for usage elsewhere in the query.","","The name alias of the expression, how it can referred in …","","","","","Matches all elem of a list of values.","","","Creates a union with previous selection and the given …","Implement a join with no conditions.","Builds an <code>AND</code> condition having <code>self</code> as the left leaf and …","An <code>AND</code> statement, is true when both sides are true.","Adds a table to be selected.","Adds an additional <code>WHERE</code> condition to the query combining …","Matches at least one elem of a list of values.","","","","Creates a new array value.","Returns a bool if the value is a boolean, otherwise <code>None</code>.","Returns a bytes slice if the value is text or a byte …","Returns a char if the value is a char, otherwise <code>None</code>.","Returns a <code>NaiveDate</code> if the value is a <code>Date</code>, otherwise <code>None</code>.","Returns a <code>DateTime</code> if the value is a <code>DateTime</code>, otherwise …","Returns a <code>f32</code> if the value is a double, otherwise <code>None</code>.","Returns a <code>f64</code> if the value is a double, otherwise <code>None</code>.","Returns an <code>i32</code> if the value is a 32-bit signed integer, …","Returns an <code>i64</code> if the value is a 64-bit signed integer, …","Returns an <code>i64</code> if the value is a signed integer, otherwise …","Returns a reference to a JSON Value if of Json type, …","Returns a reference to a bigdecimal, if the value is a …","Returns a &amp;str if the value is text, otherwise <code>None</code>.","Returns a <code>NaiveTime</code> if the value is a <code>Time</code>, otherwise <code>None</code>.","Returns an UUID if the value is of UUID type, otherwise …","Change the order to <code>ASC</code>","Change the order to <code>ASC</code>","Change the order to <code>ASC NULLS FIRST</code>","Change the order to <code>ASC NULLS FIRST</code>","Change the order to <code>ASC NULLS LAST</code>","Change the order to <code>ASC NULLS LAST</code>","A quick alias to create an asterisk to a table.","A qualified asterisk to this table","Calculates the average value of a numeric column.","Tests if the value is between two given values.","","","Creates a new boolean value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert into a common <code>Insert</code> statement.","Convert into a common <code>Insert</code> statement.","Creates a new bytes value.","Creates a new character value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the first non-null argument","Selects a named value from the nested expresion. The …","Adds a column to be selected.","A bulk method to select multiple values.","Adds a comment to the delete.","Adds a comment to the insert.","Adds a comment to the select.","Adds a comment to the update.","Compares two expressions with a custom operator.","","","Concat several expressions.","True if the index definition contains the given column.","Count of the underlying table where the given expression …","Define in which database the table is located","","Creates a new date value.","Creates a new datetime value.","","Sets the default value for the column.","","","","","","","","","","","True when the default value is set and automatically …","A quick alias to create a default value expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Change the order to <code>DESC</code>","Change the order to <code>DESC</code>","Change the order to <code>DESC NULLS FIRST</code>","Change the order to <code>DESC NULLS FIRST</code>","Change the order to <code>ASC NULLS LAST</code>","Change the order to <code>ASC NULLS LAST</code>","Adds <code>DISTINCT</code> to the select query.","Creates a union with previous selection and the given …","","Creates a new double value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new empty in-memory set of values.","Creates a new enum value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests if both sides are the same value.","","","","","","","Creates a new float value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a new <code>DELETE</code> statement for the given table.","Creates a new <code>SELECT</code> statement for the given table.","Adds <code>FULL JOIN</code> clause to the query.","Adds a <code>FULL JOIN</code> clause to the query, specifically for …","Tests if the left side is bigger than the right side.","","","Tests if the left side is bigger than the right side or …","","","Group by <code>self</code>","","Adds a grouping to the <code>GROUP BY</code> section.","At least one of the index columns has automatically …","Adds group conditions to a query. Should be combined …","Tests if the left side is included in the right side …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds <code>INNER JOIN</code> clause to the query.","Adds an <code>INNER JOIN</code> clause to the query, specifically for …","Creates a new 32-bit signed integer.","Creates a new 64-bit signed integer.","Creates a new 32-bit signed integer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Transforms to a JSON Value if of Json type, otherwise <code>None</code>.","Returns a bigdecimal, if the value is a numeric, float or …","","","","","Transforms the <code>Value</code> to a <code>String</code> if it’s text, otherwise …","Returns a Vec if the value is an array of T, otherwise <code>None</code>…","Inverts the entire condition tree if condition is met.","<code>true</code> if the <code>Value</code> is an Array.","","<code>true</code> if the <code>Value</code> is a boolean value.","Returns whether this value is the <code>Bytes</code> variant.","<code>true</code> if the <code>Value</code> is a Date.","<code>true</code> if the <code>Value</code> is a DateTime.","","","","","","True if has no rows.","<code>true</code> if the <code>Value</code> is a 32-bit signed integer.","<code>true</code> if the <code>Value</code> is a 64-bit signed integer.","","<code>true</code> if the <code>Value</code> is a signed integer.","<code>true</code> if the <code>Value</code> is a JSON value.","Tests if the left side is not <code>NULL</code>.","","","Tests if the left side is <code>NULL</code>.","","","<code>true</code> if the <code>Value</code> is null.","<code>true</code> if the <code>Value</code> is a numeric value or can be converted …","","<code>true</code> if the <code>Value</code> is text.","<code>true</code> if the <code>Value</code> is a <code>Time</code>.","","","<code>true</code> if the <code>Value</code> is of UUID type.","Creates a new JSON value.","Tests if the JSON array starts with a value.","","","Tests if the JSON array contains a value.","","","Tests if the JSON array ends with a value.","","","Tests if the JSON array does not start with a value.","","","Tests if the JSON array does not contain a value.","","","Tests if the JSON array does not end with a value.","","","Extracts a subset of a JSON blob given a path. Two types …","Tests if the JSON value is of a certain type.","","","Tests if the JSON value is not of a certain type.","","","Converts a JSON expression into string and unquotes it.","The type of the expression, dictates how it’s …","Adds <code>LEFT JOIN</code> clause to the query.","Adds a <code>LEFT JOIN</code> clause to the query, specifically for …","","The number of rows in the in-memory table.","Tests if the left side is smaller than the right side.","","","Tests if the left side is smaller than the right side or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests if the left side includes the right side string.","","","Sets the <code>LIMIT</code> value.","Converts the result of the expression into lowercase …","Tests if a full-text search matches a certain query. Use …","","","Calculates the maximum value of a numeric column.","Calculates the minimum value of a numeric column.","","","Creates a new multi row <code>INSERT</code> statement for the given …","","Finds all named values or columns from the selection.","Generates the function uuid_to_bin(uuid()) returning a …","Create a column definition.","","","","","Create a new in-memory set of values.","Builds a <code>NOT</code> condition having <code>self</code> as the condition.","A <code>NOT</code> statement, is true when the expression is false.","Tests if the value is not between two given values.","","","Tests if both sides are not the same value.","","","Tests if the left side is not included in the right side …","","","Tests if the left side does not include the right side …","","","Tests if a full-text search does not match a certain …","","","Creates a new decimal value.","Sets the <code>OFFSET</code> value.","Add the <code>JOIN</code> conditions.","","Sets the conflict resolution strategy.","Include the table name in the column expression, if table …","Builds an <code>OR</code> condition having <code>self</code> as the left leaf and …","An <code>OR</code> statement, is true when one side is true.","Adds an additional <code>WHERE</code> condition to the query combining …","Order by <code>self</code> in the given order","","Define the order of the row number. Is the row order if …","Adds an ordering to the <code>ORDER BY</code> section.","Define the partitioning of the row number","","","Add value to the temporary table.","","","Sets the returned columns.","","Adds <code>RIGHT JOIN</code> clause to the query.","Adds a <code>RIGHT JOIN</code> clause to the query, specifically for …","","A number from 1 to n in specified order","Return the given table in <code>JSON</code> format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add another column value assignment to the query","A single leaf, is true when the expression is true.","","Creates a new single row <code>INSERT</code> statement for the given …","Adds <code>WHERE</code> conditions to the query. See Comparable for …","Adds <code>WHERE</code> conditions to the query, replacing the previous …","Adds <code>WHERE</code> conditions to the query. See Comparable for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates the sum value of a numeric column.","Include the table name in the column expression.","Creates the basis for an <code>UPDATE</code> statement to the given …","Creates a new string value.","Performs a full-text search. Use it in combination with …","Computes the relevance score of a full-text search query …","Creates a new time value.","Returns a cloned <code>Vec&lt;u8&gt;</code> if the value is text or a byte …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a cloned String if the value is text, otherwise …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets a type family, used mainly for SQL Server <code>OUTPUT</code> hack.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the result of the expression into uppercase …","Creates a new uuid value.","Generates the function uuid_to_bin(uuid()) returning a …","Generates an optimized swapped UUID in MySQL 8 see …","Adds a new value to the <code>INSERT</code> statement","Selects a static value as the column.","Adds a new row to be inserted.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds a common table expression to the select.","","Create a new in-memory set of values with an allocated …","Creates a new XML value.","","General information about a SQL connection.","Nothing is encrypted.","TLS mode when connecting to SQL Server.","","","Controls the locking and row versioning behavior of …","A connector interface for the SQL Server database.","A SQL Server connection URL.","","Wraps a connection url and exposes the parsing logic used …","A connector interface for the MySQL database.","A MySQL connection URL.","","Wraps a connection url and exposes the parsing logic used …"," Only the login credentials are encrypted.","All traffic is encrypted.","A connector interface for the PostgreSQL database.","A PostgreSQL connection URL.","","Wraps a connection url and exposes the parsing logic used …","Represents a connection or a transaction that can be …","","","","An owned version of a <code>Row</code> in a <code>ResultSet</code>. See ResultRowRef …","A reference to a <code>Row</code> in a <code>ResultSet</code>. The columns can be …","Encapsulates a set of results and their respective column …","Thin iterator for ResultSet rows. Might become lazy one …","","","One of the supported SQL variants.","A connector interface for the SQLite database","A SQLite connection URL.","","Wraps a connection url and exposes the parsing logic used …","","","","","","A representation of an SQL database transaction. If not …","A thing that can start a new transaction.","","The custom application name","Make a referring ResultRowRef.","Get a string representation of the family.","Take a value from a certain position in the row, if having …","Take a value from a certain position in the row, if having …","Statement to begin a transaction","Statement to begin a transaction","Statement to begin a transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The underlying Tiberius client. Only available with the …","The underlying tokio_postgres::Client. Only available with …","","","","","","","","","","","","","","","","","","","An iterator of column names.","Commit the changes to the database and consume the …","The underlying mysql_async::Conn. Only available with the …","A duration how long we can try to connect to the database.","The connection timeout.","The connection timeout.","The underlying rusqlite::Connection. Only available with …","Maximum number of connections the pool can have (if used …","","The JDBC connection string","A string describing the database location, meant for error …","","The provided database name. This will be <code>None</code> on SQLite.","Name of the database.","Name of the database connected. Defaults to <code>mysql</code>.","Name of the database connected. Defaults to <code>postgres</code>.","","Execute a <code>DELETE</code> query, returning the number of affected …","Execute a <code>DELETE</code> query, returning the number of affected …","Execute a <code>DELETE</code> query, returning the number of affected …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The TLS mode to use when connecting to the database.","","","","","","","Execute the given query, returning the number of affected …","","","","","","Execute a query given as SQL, interpolating the given …","","","","","","Execute a query given as SQL, interpolating the given …","","","","","","The database file for SQLite, otherwise <code>None</code>.","This is not a <code>PathBuf</code> because we need to <code>ATTACH</code> the …","Returns the first row of the <code>ResultSet</code>, or None if the set …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Takes the first row and deserializes it.","Convert url scheme to an SqlFamily.","","","Parse <code>ConnectionInfo</code> out from an SQL connection string.","Take a value with the given column name from the row. Usage","Take a value with the given column name from the row.","Returns a reference to a row in a given position.","","The provided database host. This will be <code>&quot;localhost&quot;</code> on …","Database hostname.","The database host. If <code>socket</code> and <code>host</code> are not set, …","The database host. Taken first from the <code>host</code> query …","","","","","","","","","","","","","","","","","","","","","","Execute an <code>INSERT</code> query.","Execute an <code>INSERT</code> query.","Execute an <code>INSERT</code> query.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Takes the first row if existing, otherwise returns error.","Returns true if the <code>ResultSet</code> contains no rows.","Returns false, if connection is considered to not be in a …","","","","","","True, if family is SQL Server.","True, if family is MySQL.","True, if family is PostgreSQL.","True, if family is SQLite.","The last id inserted, if available. Only works on certain …","Returns the number of rows in the <code>ResultSet</code>.","","","","","","","","","","","","","","","","","","","","The maximum connection lifetime","The maximum connection lifetime","The maximum connection lifetime","","The maximum idle connection lifetime","The maximum idle connection lifetime","The maximum idle connection lifetime","","The underlying MySQL driver. Only available with the …","","Creates a new instance, bound to the given column names …","","Creates a new connection to SQL Server.","Create a new MySQL connection using <code>OptsBuilder</code> from the …","Parse <code>Url</code> to <code>MysqlUrl</code>. Returns error for mistyped …","Create a new connection to the database.","Parse <code>Url</code> to <code>PostgresUrl</code>. Returns error for mistyped …","Open a new SQLite database in memory.","","Constructor function for a <code>ParamsFromIter</code>. See its …","The password to use when connecting to the database.","The percent-decoded database password.","The percent-decoded database password.","Whether the pgbouncer mode is enabled.","Whether the pgbouncer mode is enabled.","A pool check_out timeout.","The pool check_out timeout","Pool check_out timeout","The provided database port, if applicable.","Database port.","The database port, defaults to <code>3306</code>.","The database port, defaults to <code>5432</code>.","Prefer socket connection","Execute the given query.","","","","","","Execute a query given as SQL, interpolating the given …","","","","","","Execute a query given as SQL, interpolating the given …","","","","","","Run a command in the database, for queries that can’t be …","","","","","","Signals if the isolation level SET needs to happen before …","","","","","","Rolls back the changes to the database.","The underlying sqlite driver. Only available with the …","The prefix which to use when querying database.","The database schema, defaults to <code>public</code>.","This is what item names are prefixed with in queries.","Check if a family exists for the given scheme.","","","","","","","","","","","","","","","","","","","","Execute a <code>SELECT</code> query.","Execute a <code>SELECT</code> query.","Execute a <code>SELECT</code> query.","Execute an arbitrary function in the beginning of each …","Execute an arbitrary function in the beginning of each …","Execute an arbitrary function in the beginning of each …","","Sets the transaction isolation level to given value. …","","","","","","If set, connected to the database through a Unix socket.","A duration how long one query can take.","The socket timeout","The socket timeout","","The family of databases connected.","Returns the SQLite version as a string; e.g., <code>&quot;3.16.2&quot;</code> for …","Starts a new transaction","Starts a new transaction","Starts a new transaction","","","","","","","","","","","","","","","","","","","","","","The underlying SQL Server driver. Only available with the …","","","","","","","","","","","","","","The underlying postgres driver. Only available with the …","If true, we allow invalid certificates (self-signed, or …","Path to a custom server certificate file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute an <code>UPDATE</code> query, returning the number of affected …","Execute an <code>UPDATE</code> query, returning the number of affected …","Execute an <code>UPDATE</code> query, returning the number of affected …","The bare <code>Url</code> to the database.","The bare <code>Url</code> to the database.","The provided database user name. This will be <code>None</code> on …","The username to use when connecting to the database.","The percent-decoded database username.","The percent-decoded database username.","Return the version of the underlying database, queried …","","","","","","","","","","","","","","","","","","","","","","","","","The name the database is bound to - Always “main”","","The filesystem path of the SQLite database.","","","","","","","","","","","","","","","The error types for database I/O, connection and query …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if the error was associated with closed …","A more specific error type for matching.","","","","","The error code sent by the database, if available.","The original error message sent by the database, if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Builder</code> to construct an instance of a <code>Quaint</code> pool.","A connection from the pool. Implements Queryable.","The main entry point and an abstraction over database …","","","","","","","","Consume the builder and create a new instance of a pool.","Creates a new builder for a Quaint connection pool with …","The number of connections in the pool.","Reserve a connection from the pool.","","","Info about the connection and underlying database.","The maximum number of connections in the pool.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Sets the interval how often a connection health will be …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The maximum number of idle connections the pool can …","A time how long an idling connection can be kept in the …","A time how long a connection can be kept in the pool before","A timeout for acquiring a connection with the <code>check_out</code> …","","","","","","","","","","","","","","Perform a health check before returning a connection from …","","","","","","","","","","","","","","","General information about a SQL connection.","","A SQL Server connection URL.","","A MySQL connection URL.","","A PostgreSQL connection URL.","","Represents a connection or a transaction that can be …","An owned version of a <code>Row</code> in a <code>ResultSet</code>. See ResultRowRef …","Encapsulates a set of results and their respective column …","One of the supported SQL variants.","A SQLite connection URL.","","A representation of an SQL database transaction. If not …","A thing that can start a new transaction.","Marks a given string or a tuple as a column. Useful when …","Execute the given query, returning the number of affected …","Execute a query given as SQL, interpolating the given …","Execute a query given as SQL, interpolating the given …","Returns false, if connection is considered to not be in a …","Execute the given query.","Execute a query given as SQL, interpolating the given …","Execute a query given as SQL, interpolating the given …","Run a command in the database, for queries that can’t be …","Signals if the isolation level SET needs to happen before …","Sets the transaction isolation level to given value. …","Marks a given string as a value. Useful when using a value …","Convert given set of tuples into <code>Values</code>.","Return the version of the underlying database, queried …","The name the database is bound to - Always “main”","","The filesystem path of the SQLite database.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Deserialize a row into any type implementing <code>Deserialize</code>.","Deserialize each row of a <code>ResultSet</code>.","","Calls <code>U::from(self)</code>.","","","","","","","","The main entry point and an abstraction over a database …","","","","","","Info about the connection and underlying database.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Create a new connection to the database. The connection …","Open a new SQLite database in memory.","","","","","","","","","","","","","","","Closing backtick character to surround identifiers, such …","Opening backtick character to surround identifiers, such …","Wildcard character to be used in <code>LIKE</code> queries.","A visitor to generate queries for the SQL Server database.","A visitor to generate queries for the MySQL database.","A visitor to generate queries for the PostgreSQL database.","","A visitor to generate queries for the SQLite database.","A function travelling through the query AST, building the …","When called, the visitor decided to not render the …","","","","","","","","","","","","","Convert the given <code>Query</code> to an SQL string and a vector of …","","","","","","A point to modify an incoming query to make it compatible …","A point to modify an incoming query to make it compatible …","A helper for delimiting an identifier, surrounding every …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","What to use to substitute a parameter in the query.","","","","","","","","","","","","","","A helper for delimiting a part of an identifier, …","","","","","","","","","","","","","What to use to substitute a parameter in the query.","","","","","","","A database column identifier","The selected columns","","A comparison expression","","","","A walk through the query conditions","","A walk through an <code>DELETE</code> statement","","","","","A visit to a value used in an expression","","","","","","A visit in the <code>GROUP BY</code> section of the query","A walk through an <code>INSERT</code> statement","","","","","","The join statements in the query","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>LIMIT</code> and <code>OFFSET</code> statement in the query","","","","","","","","","","","Visit an SQL <code>MERGE</code> query.","","","","","","","","","","A visit in the <code>ORDER BY</code> section of the query","","","","","A visit to a value we parameterize","","A walk through a complete <code>Query</code> statement","Visit a non-parameterized value.","","","","","A row of data used as an expression","A walk through a <code>SELECT</code> statement","","MySql will error if a <code>Update</code> or <code>Delete</code> query has a …","","A database table identifier","","","","","","","","","","","A walk through a union of <code>SELECT</code> statements","A walk through an <code>UPDATE</code> statement","","","","","","","","","","","Write to the query.","","","",""],"i":[18,18,18,18,18,18,18,18,18,18,18,18,18,0,18,18,18,0,18,0,0,0,0,0,0,0,0,0,0,0,63,0,0,11,16,11,40,17,18,39,39,65,65,65,43,0,11,37,40,18,37,18,18,0,0,43,40,0,0,0,43,5,0,0,43,0,36,0,18,37,18,37,43,0,0,67,65,65,65,63,61,37,18,18,11,0,0,37,18,62,0,43,38,11,11,0,0,0,11,0,62,0,67,37,18,18,0,0,0,0,0,0,0,69,18,0,11,0,0,0,0,62,11,11,11,0,11,0,36,67,0,63,0,16,16,16,11,11,11,11,11,11,11,40,40,18,40,0,43,16,0,0,0,0,0,43,38,0,69,0,11,67,43,63,62,0,43,0,0,0,67,68,0,43,16,5,0,0,40,17,63,0,0,69,0,160,37,18,0,0,18,0,39,0,39,0,67,68,0,61,67,0,37,18,0,43,0,43,69,18,18,3,4,0,160,8,3,3,7,4,4,161,3,12,13,15,162,16,14,14,161,3,12,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,163,163,163,163,163,163,0,4,0,161,3,12,18,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,18,33,35,18,18,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,0,41,14,14,42,34,14,70,161,3,12,0,5,0,4,4,18,18,8,8,38,16,54,60,64,66,12,14,13,72,8,0,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,163,163,163,163,163,163,14,13,3,18,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,72,18,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,161,3,12,17,65,34,72,18,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,18,72,36,37,8,8,8,8,8,38,38,11,39,40,40,16,16,16,41,42,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,60,5,5,5,34,34,34,33,35,61,15,15,62,63,64,65,66,67,67,67,67,67,67,67,67,67,67,68,68,68,12,12,12,12,12,12,12,14,69,4,4,4,4,4,4,4,4,4,4,4,4,13,70,71,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,72,72,42,14,14,4,161,3,12,161,3,12,164,8,14,5,14,161,3,12,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,14,4,18,18,18,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,165,165,18,166,79,8,7,12,72,18,18,167,31,8,18,18,18,16,18,3,18,18,18,18,67,60,64,66,12,72,18,18,67,18,18,161,3,12,161,3,12,18,18,67,18,18,67,67,18,18,161,3,12,161,3,12,161,3,12,161,3,12,161,3,12,161,3,12,0,161,3,12,161,3,12,0,3,14,4,12,72,161,3,12,161,3,12,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,161,3,12,14,0,161,3,12,0,0,3,34,34,8,68,0,8,60,64,12,13,72,162,16,161,3,12,161,3,12,161,3,12,161,3,12,161,3,12,18,14,168,15,34,8,162,16,14,163,8,54,14,54,12,12,72,169,3,34,7,14,4,72,0,0,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,70,16,34,34,42,14,70,17,3,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,0,8,70,18,0,0,18,18,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,18,18,18,18,18,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,18,72,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,4,8,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,0,18,0,0,33,14,35,12,36,37,8,38,11,39,40,16,41,42,3,43,44,45,46,47,48,49,17,50,51,52,53,54,55,56,57,58,59,7,60,5,34,33,35,61,15,62,63,64,65,66,67,68,12,14,69,4,13,70,71,18,72,14,12,72,18,106,0,104,0,0,101,0,0,101,95,0,0,101,95,0,104,104,0,101,95,0,0,102,102,102,0,0,0,0,102,102,0,0,101,95,0,0,0,106,0,0,0,0,0,92,93,95,93,94,170,170,170,96,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,92,96,99,101,95,102,103,104,105,106,107,92,101,95,102,103,104,105,106,107,92,108,109,110,103,105,92,113,103,116,103,101,116,101,103,105,92,108,170,170,170,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,103,95,93,94,106,95,106,170,109,113,96,110,99,170,109,113,96,110,99,170,109,113,96,110,99,101,116,108,101,95,95,93,94,108,102,102,103,104,104,96,110,105,99,106,107,92,116,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,108,95,102,104,101,93,94,108,171,101,103,105,92,93,94,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,170,170,170,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,122,93,108,93,108,108,170,109,113,96,110,99,95,95,95,95,108,108,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,103,105,92,116,103,105,92,116,0,113,108,103,96,110,105,99,92,113,122,0,103,105,92,101,92,103,105,92,101,103,105,92,105,170,109,113,96,110,99,170,109,113,96,110,99,170,109,113,96,110,99,170,109,113,96,110,99,170,109,113,96,110,99,109,0,103,92,101,95,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,170,170,170,170,170,170,99,170,109,113,96,110,99,105,103,105,92,116,101,0,172,172,172,96,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,173,0,174,101,95,102,103,104,105,106,107,92,95,102,104,0,103,103,122,109,113,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,116,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,170,170,170,105,92,101,103,105,92,170,109,113,96,110,99,122,109,113,101,95,93,94,108,102,103,104,96,110,105,99,106,107,92,116,175,176,175,128,126,127,128,128,128,128,128,128,128,128,0,128,128,0,0,127,127,128,128,128,127,128,128,128,128,128,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,126,128,128,128,126,127,126,121,128,127,126,121,128,127,126,121,128,127,126,121,128,127,126,121,128,127,126,127,126,127,127,126,126,121,121,128,128,127,126,126,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,128,128,127,126,121,128,127,126,121,128,121,121,127,126,121,128,121,121,121,128,127,126,121,128,127,126,121,128,127,126,121,128,127,126,121,128,127,126,121,128,127,126,121,128,127,126,121,128,177,178,179,180,181,182,183,184,185,186,177,187,187,188,189,190,187,191,0,0,0,147,147,148,149,147,148,149,148,149,149,149,149,149,149,148,147,148,149,147,148,149,147,148,149,147,147,147,147,148,149,148,147,148,149,147,148,149,147,147,148,149,148,148,148,148,147,147,147,147,147,147,148,149,147,147,147,148,149,148,149,147,148,149,147,148,149,147,148,149,147,147,148,149,0,101,101,95,101,95,101,95,0,0,0,0,101,95,0,0,0,170,170,170,170,170,170,170,170,170,170,0,0,170,175,176,175,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,0,151,151,151,151,151,151,151,151,151,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,192,192,192,0,0,0,0,0,0,192,154,155,156,157,154,155,156,157,154,155,156,157,192,154,155,156,157,192,154,192,192,154,155,156,157,154,155,156,157,154,155,156,157,154,155,156,157,154,155,156,157,154,155,156,157,154,155,156,157,192,154,155,156,157,154,155,156,157,154,155,156,157,192,192,154,155,156,157,154,155,156,157,154,155,156,157,192,154,155,156,157,154,192,192,192,192,192,156,157,192,192,192,192,154,155,156,192,192,192,155,192,155,192,192,192,154,155,156,157,192,192,192,154,155,156,157,192,154,155,156,157,192,154,155,156,157,192,154,155,156,157,192,154,155,156,157,192,154,155,156,157,155,192,155,192,156,192,192,154,155,156,157,192,154,155,156,157,154,192,154,192,154,155,156,192,156,192,192,192,154,155,156,157,192,192,192,192,154,155,156,157,192,192,192,155,192,192,192,154,155,156,157,192,154,155,156,157,192,192,192,154,155,192,157,192,154,155,156,157,192,154,155,156,157],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,3],3],[[4,[6,[5]]],4],[[],7],[[]],[8],[3,[[10,[9]]]],[3],[7],[4],0,[[],11],[3,11],[12,11],[[13,14],13],[[[6,[4]]],15],[[],16],[16,16],[14,14],[14,14],[[],11],[3,11],[12,11],[[],17],[[],18],[18,[[10,[2]]]],[18,10],[18,[[10,[19]]]],[18,[[10,[20]]]],[18,[[10,[[22,[21]]]]]],[18,[[10,[23]]]],[18,[[10,[24]]]],[18,[[10,[25]]]],[18,[[10,[26]]]],[18,[[10,[26]]]],[18,[[10,[27]]]],[18,[[10,[28]]]],[18,[[10,[9]]]],[18,[[10,[29]]]],[18,[[10,[30]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],3],[4,3],[[],7],[[],11],[3,11],[12,11],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],32],[33,34],[35,34],[[],18],[[],18],[36,36],[37,37],[8,8],[38,38],[11,11],[39,39],[40,40],[16,16],[41,41],[42,42],[3,3],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[17,17],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[7,7],[60,60],[5,5],[34,34],[33,33],[35,35],[61,61],[15,15],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[12,12],[14,14],[69,69],[4,4],[13,13],[70,70],[71,71],[18,18],[72,72],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[41,[6,[[73,[9]]]]],41],[14,14],[14,14],[[42,[6,[[73,[9]]]]],42],[[34,[6,[[73,[9]]]]],34],[[14,[6,[[73,[9]]]]],14],[[70,[6,[[73,[9]]]]],70],[[],11],[3,11],[12,11],[74,7],[[5,8],2],[[],7],[4,4],0,[20,18],[[[22,[21]]],18],[[],8],[8,8],[[],38],[[],16],[[],54],[[],60],[[],64],[[],66],[[],12],[[],14],[[],13],[[],72],[8,2],[[],3],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[14,14],[[13,14],13],[[3,3],3],[24,18],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[[],72],[[],18],[[8,8],2],[[38,38],2],[[11,11],2],[[39,39],2],[[40,40],2],[[16,16],2],[[41,41],2],[[42,42],2],[[3,3],2],[[43,43],2],[[44,44],2],[[45,45],2],[[46,46],2],[[47,47],2],[[48,48],2],[[49,49],2],[[17,17],2],[[50,50],2],[[51,51],2],[[52,52],2],[[53,53],2],[[54,54],2],[[55,55],2],[[56,56],2],[[57,57],2],[[58,58],2],[[59,59],2],[[7,7],2],[[60,60],2],[[5,5],2],[[34,34],2],[[33,33],2],[[35,35],2],[[61,61],2],[[15,15],2],[[62,62],2],[[63,63],2],[[64,64],2],[[65,65],2],[[66,66],2],[[67,67],2],[[68,68],2],[[12,12],2],[[14,14],2],[[69,69],2],[[4,4],2],[[13,13],2],[[70,70],2],[[71,71],2],[[18,18],2],[[72,72],2],[[],11],[3,11],[12,11],[[],2],[[],2],[[],34],[72,[[10,[12]]]],[23,18],[[36,76],77],[[37,76],77],[[8,76],77],[[38,76],77],[[11,76],77],[[39,76],77],[[40,76],77],[[16,76],77],[[41,76],77],[[42,76],77],[[3,76],77],[[43,76],77],[[44,76],77],[[45,76],77],[[46,76],77],[[47,76],77],[[48,76],77],[[49,76],77],[[17,76],77],[[50,76],77],[[51,76],77],[[52,76],77],[[53,76],77],[[54,76],77],[[55,76],77],[[56,76],77],[[57,76],77],[[58,76],77],[[59,76],77],[[7,76],77],[[60,76],77],[[5,76],77],[[34,76],77],[[33,76],77],[[35,76],77],[[61,76],77],[[15,76],77],[[62,76],77],[[63,76],77],[[64,76],77],[[65,76],77],[[66,76],77],[[67,76],77],[[68,76],77],[[12,76],77],[[14,76],77],[[69,76],77],[[4,76],77],[[13,76],77],[[70,76],77],[[71,76],77],[[18,76],77],[[18,76],77],[[72,76],77],[[]],[[]],[9,8],[[],8],[[]],[9,8],[78,8],[[]],[[],38],[[]],[[]],[[]],[8,40],[[]],[11,16],[14,16],[[]],[[]],[11,3],[46,3],[8,3],[74,3],[49,3],[56,3],[71,3],[53,3],[54,3],[55,3],[45,3],[12,3],[63,3],[58,3],[14,3],[7,3],[52,3],[13,3],[47,3],[72,3],[48,3],[16,3],[44,3],[50,3],[[]],[57,3],[[],3],[43,3],[51,3],[59,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[56,7],[49,7],[51,7],[53,7],[54,7],[59,7],[52,7],[[]],[46,7],[44,7],[47,7],[58,7],[45,7],[48,7],[57,7],[55,7],[50,7],[[]],[[]],[[],5],[74,5],[[]],[33,34],[35,34],[[]],[[]],[[]],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[34,67],[33,67],[35,67],[[],67],[[]],[68,67],[14,67],[42,67],[70,67],[13,67],[[]],[14,68],[13,68],[[],12],[[],12],[74,12],[[],12],[[]],[[],12],[[],12],[[]],[[]],[[[74,[12]]],4],[78,4],[[],4],[72,4],[9,4],[[],4],[[],4],[[],4],[[],4],[[]],[78,4],[14,4],[[]],[[]],[[]],[26,18],[20,18],[[[10,[75]]],18],[9,18],[25,18],[[[10,[23]]],18],[27,18],[[[10,[28]]],18],[[[10,[2]]],18],[[]],[10,18],[29,18],[[[10,[26]]],18],[[[10,[[22,[21]]]]],18],[30,18],[[[10,[30]]],18],[78,18],[2,18],[[[10,[27]]],18],[[[10,[25]]],18],[28,18],[[[10,[20]]],18],[[[10,[9]]],18],[24,18],[[[22,[21]]],18],[[[10,[24]]],18],[75,18],[[[10,[29]]],18],[[],18],[[[10,[78]]],18],[23,18],[[],72],[[]],[[],42],[[],14],[14,14],[4,4],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[],79],[8,79],[14,14],[5,2],[14,14],[[],11],[3,11],[12,11],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[14,14],[4,4],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[[73,[9]]]]],41],[[[6,[[73,[9]]]]],41],[18],[[],79],[79,79],[8,79],[7,79],[12],[72],[18,[[10,[27]]]],[18,[[10,[28]]]],[[],31],[31,31],[8,31],[18,80],[18,[[10,[78]]]],[18,[[10,[74]]]],[[16,2],16],[18,2],[3,2],[18,2],[18,2],[18,2],[18,2],[67,2],[60,2],[64,2],[66,2],[12,2],[72,2],[18,2],[18,2],[67,2],[18,2],[18,2],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[18,2],[18,2],[67,2],[18,2],[18,2],[67,2],[67,2],[18,2],[27,18],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[2,7],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[],7],[3,43],[14,14],[4,4],[12,75],[72,75],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[3,11],[12,11],[[14,75],14],[[],7],[[],11],[3,11],[12,11],[[],7],[[],7],[[3,3],3],[[],35],[[],35],0,[68,[[74,[78]]]],[[],3],[[],8],[[[74,[79]]],60],[[[74,[31]]],64],[[],12],[14,13],[[[74,[12]]],72],[[],16],[[],16],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[[],11],[3,11],[12,11],[28,18],[[14,75],14],[[],15],[15,15],[[34,61],34],[[8,10],8],[[],16],[16,16],[14,14],[[[10,[65]]],31],[[8,[10,[65]]],31],[54,54],[14,14],[54,54],[12,[[10,[3]]]],[12],[72],[[],71],[[3,3],3],[34,34],[7,2],[14,14],[4,4],[72,75],[[],54],[2,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,70],[[],16],[[],33],[[],33],[42,42],[14,14],[70,70],[[],17],[[3,3],3],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],7],[8,8],[[],70],[[],18],[[],7],[[],7],[29,18],[18,[[10,[[74,[83]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,[[82,[84,85]]]],[[18,1,86],[[82,[87,[89,[88]]]]]],[[18,1,86],[[82,[87,[89,[88]]]]]],[18,[[10,[78]]]],[[],78],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[80,[[90,[18]]]],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],0,[[8,37],8],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],7],[30,18],[[],3],[[],3],[33,33],[14,14],[35,35],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,41],14],[75,12],[75,72],[[],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[92,[[10,[9]]]],[93,94],[95,9],[[93,75],[[10,[18]]]],[[94,75],[[10,[18]]]],[[],9],[[],9],[[],9],[96,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[92,97],[96,98],[99,100],[101,101],[95,95],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[92,92],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,74],[109,90],[110,111],[103,[[10,[112]]]],[105,[[10,[112]]]],[92,[[10,[112]]]],[113,111],[103,[[10,[75]]]],0,[103,9],[101,78],0,[101,[[10,[9]]]],[103,9],[105,9],[92,9],[[],108],[42,[[115,[[89,[114]]]]]],[42,[[115,[[89,[114]]]]]],[42,[[115,[[89,[114]]]]]],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[103,104],[[95,95],2],[[93,93],2],[[94,94],2],[[106,106],2],[[],2],[[],2],[67,[[115,[[89,[114]]]]]],[[109,67],[[115,[[89,[114]]]]]],[[113,67],[[115,[[89,[114]]]]]],[[96,67],[[115,[[89,[114]]]]]],[[110,67],[[115,[[89,[114]]]]]],[[99,67],[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[[109,9],[[115,[[89,[114]]]]]],[[113,9],[[115,[[89,[114]]]]]],[[96,9],[[115,[[89,[114]]]]]],[[110,9],[[115,[[89,[114]]]]]],[[99,9],[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[[109,9],[[115,[[89,[114]]]]]],[[113,9],[[115,[[89,[114]]]]]],[[96,9],[[115,[[89,[114]]]]]],[[110,9],[[115,[[89,[114]]]]]],[[99,9],[[115,[[89,[114]]]]]],[101,[[10,[9]]]],0,[108,[[10,[94]]]],[[101,76],77],[[95,76],77],[[95,76],77],[[93,76],77],[[94,76],77],[[108,76],77],[[102,76],77],[[102,76],77],[[103,76],77],[[104,76],77],[[104,76],77],[[96,76],77],[[110,76],77],[[105,76],77],[[99,76],77],[[106,76],77],[[107,76],77],[[92,76],77],[[116,76],77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,[[90,[117]]]],[9,[[10,[95]]]],[9,[[90,[102]]]],[9,[[90,[104]]]],[9,[[90,[101]]]],[[93,9],[[10,[18]]]],[[94,9],[[10,[18]]]],[[108,75],[[10,[94]]]],[[],[[90,[[74,[18]]]]]],[101,9],[103,9],[105,9],[92,9],[[93,[118,[93,18]]],18],[[94,[118,[94,18]]],18],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[[],75],[34,[[115,[[89,[114]]]]]],[34,[[115,[[89,[114]]]]]],[34,[[115,[[89,[114]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93],[108],[93,[[90,[18]]]],[108,[[90,[93]]]],[108,2],[[],2],[109,2],[113,2],[96,2],[110,2],[99,2],[95,2],[95,2],[95,2],[95,2],[108,[[10,[119]]]],[108,75],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[103,[[10,[112]]]],[105,[[10,[112]]]],[92,[[10,[112]]]],0,[103,[[10,[112]]]],[105,[[10,[112]]]],[92,[[10,[112]]]],0,0,[9,[[90,[113]]]],[[[74,[78]],[74,[[74,[18]]]]],108],[9,[[90,[103]]]],[103,[[90,[96]]]],[105,[[90,[110]]]],[120,[[82,[105,121]]]],[92,[[90,[99]]]],[120,[[82,[92,121]]]],[[],[[90,[113]]]],[122,10],[[],123],[103,[[10,[9]]]],[105,[[10,[[73,[9]]]]]],[92,[[73,[9]]]],[101,2],[92,2],[103,[[10,[112]]]],[105,[[10,[112]]]],[92,[[10,[112]]]],[101,[[10,[124]]]],[103,124],[105,124],[92,124],[105,[[10,[2]]]],[67,[[115,[[89,[114]]]]]],[[109,67],[[115,[[89,[114]]]]]],[[113,67],[[115,[[89,[114]]]]]],[[96,67],[[115,[[89,[114]]]]]],[[110,67],[[115,[[89,[114]]]]]],[[99,67],[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[[109,9],[[115,[[89,[114]]]]]],[[113,9],[[115,[[89,[114]]]]]],[[96,9],[[115,[[89,[114]]]]]],[[110,9],[[115,[[89,[114]]]]]],[[99,9],[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[[109,9],[[115,[[89,[114]]]]]],[[113,9],[[115,[[89,[114]]]]]],[[96,9],[[115,[[89,[114]]]]]],[[110,9],[[115,[[89,[114]]]]]],[[99,9],[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[[109,9],[[115,[[89,[114]]]]]],[[113,9],[[115,[[89,[114]]]]]],[[96,9],[[115,[[89,[114]]]]]],[[110,9],[[115,[[89,[114]]]]]],[[99,9],[[115,[[89,[114]]]]]],[[],2],[109,2],[113,2],[96,2],[110,2],[99,2],[109,90],0,[103,9],[92,9],[101,9],[9,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,[[115,[[89,[114]]]]]],[14,[[115,[[89,[114]]]]]],[14,[[115,[[89,[114]]]]]],[109,[[115,[[89,[114]]]]]],[109,[[115,[[89,[114]]]]]],[109,[[115,[[89,[114]]]]]],[[99,109],[[115,[[89,[114]]]]]],[102,[[115,[[89,[114]]]]]],[[109,102],[[115,[[89,[114]]]]]],[[113,102],[[115,[[89,[114]]]]]],[[96,102],[[115,[[89,[114]]]]]],[[110,102],[[115,[[89,[114]]]]]],[[99,102],[[115,[[89,[114]]]]]],[105,10],[103,[[10,[112]]]],[105,[[10,[112]]]],[92,[[10,[112]]]],0,[101,95],[[],9],[[[10,[102]]],[[115,[[89,[114]]]]]],[[[10,[102]]],[[115,[[89,[114]]]]]],[[[10,[102]]],[[115,[[89,[114]]]]]],[[96,[10,[102]]],[[115,[[89,[114]]]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[90,[[74,[18]]]]]],0,[[],[[74,[78]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],78],[[],78],[[],78],0,[103,2],[103,[[10,[9]]]],[[],82],[[],82],[9,[[90,[113]]]],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[9,[[90,[116]]]],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[[],91],[70,[[115,[[89,[114]]]]]],[70,[[115,[[89,[114]]]]]],[70,[[115,[[89,[114]]]]]],[105,120],[92,120],[101,[[10,[[73,[9]]]]]],[103,[[10,[9]]]],[105,[[73,[9]]]],[92,[[73,[9]]]],[[],[[115,[[89,[114]]]]]],[109,[[115,[[89,[114]]]]]],[113,[[115,[[89,[114]]]]]],[96,[[115,[[89,[114]]]]]],[110,[[115,[[89,[114]]]]]],[99,[[115,[[89,[114]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[125,126],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[[127,127],2],[[126,126],2],[[],2],[[],2],[[127,76],77],[[127,76],77],[[126,76],77],[[126,76],77],[[121,76],77],[[121,76],77],[[128,76],77],[[128,76],77],[[]],[[]],[10,126],[129,121],[130,121],[131,121],[132,121],[133,121],[134,121],[[]],[135,121],[136,121],[85,121],[137,121],[138,121],[139,121],[140,121],[141,121],[142,121],[143,121],[144,121],[137,121],[145,121],[[]],[121,128],[[],75],[[],75],[[],75],[[],75],[[]],[[]],[[]],[[]],[121,2],[121,128],[[]],[[]],[[]],[[]],[121,[[10,[9]]]],[121,[[10,[9]]]],[146],[146],[[]],[[]],[[]],[[]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],78],[[],78],[[],78],[[],78],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],91],[[],91],[[],91],[[],91],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[147,9],[[]],[[]],[[]],[[]],[[]],[[]],[148,149],[9,[[90,[148]]]],[149,150],[149,[[90,[147]]]],[149,149],[[]],[149,101],[[148,75]],[75],[75],[75],[75],[75],[75],[75],[75],[75],[[147,67],[[115,[[89,[114]]]]]],[[147,9],[[115,[[89,[114]]]]]],[[147,9],[[115,[[89,[114]]]]]],[[]],[[]],[[]],[[148,112]],[[],75],[[],75],[[],75],[[]],[[]],[[]],[147,2],[[]],[[]],[[]],[[148,119]],[[148,112]],[[148,112]],[[148,112]],[[147,67],[[115,[[89,[114]]]]]],[[147,9],[[115,[[89,[114]]]]]],[[147,9],[[115,[[89,[114]]]]]],[[147,9],[[115,[[89,[114]]]]]],[147,2],[[]],[[]],[[]],[[147,109],[[115,[[89,[114]]]]]],[[147,102],[[115,[[89,[114]]]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[148,2]],[[]],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],91],[[],91],[[],91],[147,[[115,[[89,[114]]]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[67,[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[[],2],[67,[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[9,[[115,[[89,[114]]]]]],[[],2],[102,[[115,[[89,[114]]]]]],0,0,[[],[[115,[[89,[114]]]]]],0,0,0,0,[[]],[[]],[75],[75],[[151,152],82],[151,82],[151,82],[151,82],[151,82],[[151,9],82],[151,82],[151,82],[151,82],[151,82],[151,82],[151,82],[151,82],[151,82],[151,82],[[151,9],82],[[151,152],82],[151,82],[151,82],[151,82],[[151,9],82],[[151,75],82],[[151,9,75],82],[151,82],[151,82],[151,82],[151,82],[151,82],[[151,9],82],[75],[[151,76],77],[[]],[93,[[90,[117]]]],[108,[[90,[[74,[117]]]]]],[[],75],[[]],[[]],[[]],[[],[[82,[81]]]],[[],82],[[],82],[[],91],[[]],0,[153,9],[[]],[[]],[153,153],[[]],[153,101],[75],[75],[75],[[153,67],[[115,[[89,[114]]]]]],[[153,9],[[115,[[89,[114]]]]]],[[153,9],[[115,[[89,[114]]]]]],[[153,76],77],[[]],[[],75],[[]],[153,2],[[]],[9,[[90,[153]]]],[[],[[90,[153]]]],[[153,67],[[115,[[89,[114]]]]]],[[153,9],[[115,[[89,[114]]]]]],[[153,9],[[115,[[89,[114]]]]]],[[153,9],[[115,[[89,[114]]]]]],[153,2],[[]],[[153,102],[[115,[[89,[114]]]]]],[[],[[82,[81]]]],[[]],[[],82],[[],82],[[],91],[153,[[115,[[89,[114]]]]]],[[]],0,0,0,0,0,0,0,0,0,[18],[[154,18]],[[155,18]],[[156,18]],[[157,18]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],90],[[],90],[[],90],[[],90],[[],90],[[[74,[8]]],158],[[154,67],67],[67,67],[[],158],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[75],[[]],[[]],[[]],[[]],[[],75],[[],75],[[],75],[[],75],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],158],[154,158],[155,158],[156,158],[157,158],[[]],[[]],[[]],[[]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[],[[82,[81]]]],[[9,9],158],[9,158],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],91],[[],91],[[],91],[[],91],[3,158],[[154,3],158],[[155,3],158],[[156,3],158],[[157,3],158],[[154,45],158],[45,158],[8,158],[[[74,[3]]],158],[[[73,[9]]],158],[11,158],[[156,47],158],[[157,47],158],[47,158],[16,158],[41,158],[42,158],[[154,3,3],158],[[155,3,3],158],[[156,3,3],158],[[3,3],158],[3,158],[7,158],[[155,3,3],158],[[3,3],158],[[155,3,3],158],[[3,3],158],[60,158],[34,158],[[154,34],158],[[155,34],158],[[156,34],158],[[157,34],158],[15,158],[[[74,[62]]],158],[[3,3,2],158],[[154,3,3,2],158],[[155,3,3,2],158],[[156,3,3,2],158],[[157,3,3,2],158],[49,158],[[154,49],158],[[155,49],158],[[156,49],158],[[157,49],158],0,0,0,0,0,0,0,0,0,0,[[3,40,2],158],[[154,3,40,2],158],[[155,3,40,2],158],[[156,3,40,2],158],[[157,3,40,2],158],[50,158],[[154,50],158],[[155,50],158],[[156,50],158],[[157,50],158],[[155,3,3],158],[[3,3],158],[[155,3,3],158],[[3,3],158],[[156,3,3],158],[[3,3],158],[[[10,[18]],[10,[18]]],158],[[154,[10,[18]],[10,[18]]],158],[[155,[10,[18]],[10,[18]]],158],[[156,[10,[18]],[10,[18]]],158],[[157,[10,[18]],[10,[18]]],158],[[3,[73,[9]],2],158],[[154,3,[73,[9]],2],158],[[155,3,[73,[9]],2],158],[[156,3,[73,[9]],2],158],[[157,3,[73,[9]],2],158],0,0,[[154,12,72,2],158],[[12,72,2],158],[[154,3,3],158],[[155,3,3],158],[[156,3,3],158],[[3,3],158],[[156,3,3],158],[[3,3],158],[63,158],[64,158],[[154,64],158],[[155,64],158],[[156,64],158],[[157,64],158],[18,158],[66,158],[67,158],[18,158],[[154,18],158],[[155,18],158],[[156,18],158],[[157,18],158],[12,158],[14,158],[68,158],[[155,68],158],[68,158],[[4,2],158],[56,158],[[154,56],158],[[155,56],158],[[156,56],158],[[157,56],158],[57,158],[[154,57],158],[[155,57],158],[[156,57],158],[[157,57],158],[13,158],[70,158],[70,158],[[154,70],158],[[155,70],158],[70,158],[[157,72],158],[72,158],[[]],[[]],[[]],[[]],[159,158],[[154,159],158],[[155,159],158],[[156,159],158],[[157,159],158]],"p":[[3,"Type"],[15,"bool"],[3,"Expression"],[3,"Table"],[4,"IndexDefinition"],[8,"Into"],[3,"Function"],[3,"Column"],[15,"str"],[4,"Option"],[4,"Compare"],[3,"Row"],[3,"Union"],[3,"Select"],[3,"JoinData"],[4,"ConditionTree"],[4,"JsonPath"],[4,"Value"],[15,"char"],[3,"NaiveDate"],[3,"Utc"],[3,"DateTime"],[15,"f32"],[15,"f64"],[15,"i32"],[15,"i64"],[4,"Value"],[3,"BigDecimal"],[3,"NaiveTime"],[3,"Uuid"],[6,"OrderDefinition"],[8,"ToSql"],[3,"SingleRowInsert"],[3,"Insert"],[3,"MultiRowInsert"],[4,"TypeDataLength"],[4,"TypeFamily"],[4,"DefaultValue"],[4,"JsonCompare"],[4,"JsonType"],[3,"CommonTableExpression"],[3,"Delete"],[4,"ExpressionKind"],[3,"AggregateToString"],[3,"Average"],[3,"Coalesce"],[3,"Concat"],[3,"Count"],[3,"JsonExtract"],[3,"JsonUnquote"],[3,"Lower"],[3,"Maximum"],[3,"Minimum"],[3,"RowNumber"],[3,"RowToJson"],[3,"TextSearch"],[3,"TextSearchRelevance"],[3,"Sum"],[3,"Upper"],[3,"Grouping"],[4,"OnConflict"],[4,"Join"],[4,"SqlOp"],[3,"Ordering"],[4,"Order"],[3,"Over"],[4,"Query"],[4,"SelectQuery"],[4,"TableType"],[3,"Update"],[3,"Raw"],[3,"Values"],[4,"Cow"],[3,"Vec"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"String"],[6,"GroupByDefinition"],[4,"ColumnData"],[4,"CNil"],[4,"Result"],[15,"u8"],[4,"ToSqlOutput"],[4,"Error"],[3,"BytesMut"],[4,"IsNull"],[8,"Error"],[3,"Box"],[6,"Result"],[3,"TypeId"],[3,"PostgresUrl"],[3,"ResultRow"],[3,"ResultRowRef"],[4,"SqlFamily"],[3,"Mssql"],[4,"ChannelBinding"],[3,"Mutex"],[3,"PostgreSql"],[3,"Client"],[4,"ConnectionInfo"],[4,"IsolationLevel"],[3,"MssqlUrl"],[4,"EncryptMode"],[3,"MysqlUrl"],[4,"SslAcceptMode"],[3,"SslParams"],[3,"ResultSet"],[3,"Transaction"],[3,"Mysql"],[3,"Mutex"],[3,"Duration"],[3,"Sqlite"],[8,"Future"],[3,"Pin"],[3,"SqliteParams"],[8,"DeserializeOwned"],[8,"ValueIndex"],[15,"u64"],[3,"Url"],[3,"Error"],[3,"ResultSetIterator"],[3,"ParamsFromIter"],[15,"u16"],[8,"ToString"],[4,"Name"],[4,"DatabaseConstraint"],[4,"ErrorKind"],[3,"Error"],[4,"ParseError"],[3,"ParseBoolError"],[3,"Error"],[4,"Error"],[3,"FromUtf8Error"],[4,"Error"],[3,"Error"],[3,"Error"],[4,"FromSqlError"],[4,"ParseBigDecimalError"],[3,"Error"],[3,"Error"],[3,"ParseIntError"],[3,"AddrParseError"],[3,"TryFromIntError"],[3,"Error"],[3,"Demand"],[3,"PooledConnection"],[3,"Builder"],[3,"Quaint"],[15,"u32"],[3,"ValueDeserializer"],[8,"Visitor"],[3,"Quaint"],[3,"Mssql"],[3,"Mysql"],[3,"Postgres"],[3,"Sqlite"],[6,"Result"],[8,"Display"],[8,"Aliasable"],[8,"Comparable"],[8,"Conjunctive"],[8,"Orderable"],[8,"Groupable"],[8,"IntoCommonTableExpression"],[8,"IntoGroupByDefinition"],[8,"IntoOrderDefinition"],[8,"Joinable"],[8,"IntoRaw"],[8,"Queryable"],[8,"GetRow"],[8,"TransactionCapable"],[8,"TakeRow"],[8,"ToColumnNames"],[13,"Sqlite"],[13,"InMemorySqlite"],[13,"IncorrectNumberOfParameters"],[13,"ColumnNotFound"],[13,"LengthMismatch"],[13,"UnsupportedColumnType"],[13,"UniqueConstraintViolation"],[13,"NullConstraintViolation"],[13,"ForeignKeyConstraintViolation"],[13,"DatabaseDoesNotExist"],[13,"DatabaseAccessDenied"],[13,"DatabaseAlreadyExists"],[13,"PoolTimeout"],[13,"TlsError"],[13,"ValueOutOfRange"],[13,"TableDoesNotExist"],[13,"AuthenticationFailed"],[8,"Visitor"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
